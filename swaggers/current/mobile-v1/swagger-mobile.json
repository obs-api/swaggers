{
    "openapi": "3.0.0",
    "info": {
        "title": "Mobile API",
        "version": "1.2",
        "description": "Manage your mobile fleet.",
        "contact": {
            "name": "Orange Developer Support",
            "url": "https://developer.orange.com/resources/contact-us/",
            "email": "api.tech-expert@orange.com"
        }
    },
    "servers": [
        {
            "url": "https://api.orange.com/mobile/b2b/v1/"
        }
    ],
    "paths": {
        "/subscriptions": {
            "get": {
                "operationId": "FindSubscriptions",
                "summary": "Find subscriptions.",
                "description": "Retrieve subscriptions matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "-id",
                                "status",
                                "-status",
                                "type",
                                "-type",
                                "customer.id",
                                "-customer.id",
                                "billingAccount.id",
                                "-billingAccount.id",
                                "mobileLine.id",
                                "-mobileLine.id",
                                "simCard.id",
                                "-simCard.id",
                                "plan.id",
                                "-plan.id",
                                "plan.name",
                                "-plan.name",
                                "profile.id",
                                "-profile.id",
                                "profile.name",
                                "-profile.name",
                                "service.id",
                                "-service.id",
                                "service.name",
                                "-service.name",
                                "service.portfolio",
                                "-service.portfolio",
                                "subscriber.id",
                                "-subscriber.id",
                                "subscriber.name",
                                "-subscriber.name",
                                "device.id",
                                "-device.id",
                                "device.name",
                                "-device.name",
                                "device.brand",
                                "-device.brand",
                                "lastORTDate",
                                "-lastORTDate",
                                "startedAt",
                                "-startedAt",
                                "terminatedAt",
                                "-terminatedAt",
                                "eligibilityTestAt",
                                "-eligibilityTestAt",
                                "createdAt",
                                "-createdAt",
                                "updatedAt",
                                "-updatedAt"
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "description": "Filter by identifiers.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "simCards.type",
                        "description": "Filter by the SIM card type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MAIN_SIM",
                                "TWIN_SIM"
                            ]
                        }
                    },
                    {
                        "name": "mobileLine.id",
                        "description": "Filter by the phone number.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "description": "Filter by the status of the subscription.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "INSTALLING",
                                "PENDING_ACTIVATION",
                                "OPERATIONAL",
                                "SUSPENDED",
                                "TERMINATED",
                                "NOT_LISTED",
                                "UNKNOWN"
                            ]
                        }
                    },
                    {
                        "name": "mobileLine.type",
                        "description": "Filter by the type of the mobile line.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customer.id",
                        "description": "Filter by the customer identifier.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customer.name",
                        "description": "Filter by the customer name.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "billingAccount.id",
                        "description": "Filter by the billing account.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "simCards.id",
                        "description": "Filter by the SIM card number.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "plan.id",
                        "description": "Filter by the plan identifier.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "plan.name",
                        "description": "Filter by the plan name.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "schema": {
                            "type": "string"
                        },
                        "in": "query",
                        "name": "profile.id",
                        "description": "Filter by the profile identifier."
                    },
                    {
                        "name": "profile.name",
                        "description": "Filter by the profile name.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "service.id",
                        "description": "Filter by the service identifier.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "service.name",
                        "description": "Filter by the service name.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriber.id",
                        "description": "Filter by the subscriber identifier.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subscriber.name",
                        "description": "Filter by the subscriber name.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "device.id",
                        "description": "Filter by the device identifier.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "device.name",
                        "description": "Filter By the device name.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "device.brand",
                        "description": "Filter by the device brand.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "device.type",
                        "description": "Filter by the device type.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Subscriptions matching the request.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Subscription"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Subscriptions"
                ]
            }
        },
        "/subscriptions/{subscriptionId}": {
            "get": {
                "operationId": "GetSubscriptionDetail",
                "summary": "Get detail of a subscription.",
                "description": "Retrieve detail of a subscription.",
                "parameters": [
                    {
                        "name": "subscriptionId",
                        "description": "Identifier of a subscription.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Subscription"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Subscriptions"
                ]
            }
        },
        "/subscriptions/aggregate": {
            "get": {
                "operationId": "AggregateSubscriptions",
                "summary": "Aggregate subscriptions",
                "description": "This method allows to count subscriptions grouped by one or several attributes and matching criterias.\n\nThis feature is useful for building dashboards.\n\nFor example, the call `GET /subscriptions/aggregate?groupBy=status`\n\nwill return\n\n`\n{\n   'OPERATIONAL': 30763,\n   'TERMINATED' : 252,\n   'SUSPENDED' : 9\n}\n`\n\nThe _groupBy_ Query Parameter supports several attributes ex:  ` GET /subscriptions/aggregate?groupBy=subscription.id,status",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API Key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupBy",
                        "description": "One or several attributes.",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "status",
                                    "customer.id",
                                    "customer.name",
                                    "billingAccount",
                                    "mobileLine.type",
                                    "simCards.type",
                                    "plan.id",
                                    "profile.id",
                                    "profile.name",
                                    "device.name",
                                    "device.brand"
                                ]
                            }
                        },
                        "required": true,
                        "explode": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Indicators based on your aggregation.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Subscriptions"
                ]
            }
        },
        "/simCards": {
            "get": {
                "operationId": "FindSimCards",
                "summary": "Find SIM Cards.",
                "description": "Retrieve SIM cards matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "id",
                                "-id",
                                "pukCode",
                                "-pukCode",
                                "createdAt",
                                "updatedAt",
                                "-createdAt",
                                "-updatedAt"
                            ]
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "description": "Filter by Identifiers.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "description": "Filter by the SIM card type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "MAIN_SIM",
                                "TWIN_SIM"
                            ]
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "SIM cards matching the request.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SimCard"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "SIM Cards"
                ]
            }
        },
        "/simCards/aggregate": {
            "get": {
                "operationId": "AggregateSimCards",
                "summary": "Aggregate SIM cards",
                "description": "This method allows to count SIM cards grouped by one or several attributes and matching criterias.\n\nThis feature is useful for building dashboards.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API Key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupBy",
                        "description": "One or several attributes.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Indicators based on your aggregation."
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "SIM Cards"
                ]
            }
        },
        "/simCards/{simCardId}": {
            "get": {
                "operationId": "GetSimCard",
                "summary": "Get detail of a SIM Card.",
                "description": "Retrieve detail of a SIM Card.",
                "parameters": [
                    {
                        "name": "simCardId",
                        "description": "Identifier of a SIM card.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {},
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SimCard"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "SIM Cards"
                ]
            }
        },
        "/subscribers": {
            "get": {
                "operationId": "FindSubscribers",
                "summary": "Find subscribers.",
                "description": "Retrieve subscribers matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Subscribers matching the request.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Individual"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Subscribers"
                ]
            }
        },
        "/subscribers/aggregate": {
            "get": {
                "operationId": "AggregateSubscribers",
                "summary": "Aggregate subscribers",
                "description": "This method allows to count subscribers grouped by one or several attributes and matching criterias.\n\nThis feature is useful for building dashboards.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API Key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupBy",
                        "description": "One or several attributes.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Indicators based on your aggregation.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Subscribers"
                ]
            }
        },
        "/subscribers/{subscriberId}": {
            "get": {
                "operationId": "GetSubscriber",
                "summary": "Get detail of a subscriber.",
                "description": "Retrieve detail of a subscriber.",
                "parameters": [
                    {
                        "name": "subscriberId",
                        "description": "Identifier of a subscriber.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Individual"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Subscribers"
                ]
            }
        },
        "/billingAccounts": {
            "get": {
                "operationId": "FindBillingAccounts",
                "summary": "Find billing accounts.",
                "description": "Retrieve billing accounts matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "description": "Filter by the type of billing account.",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "SUBSCRIPTIONS_EQUIPMENTS",
                                "EQUIPMENTS_ONLY"
                            ]
                        }
                    },
                    {
                        "name": "companies.groupCode",
                        "description": "Filter by the group code of the billing account.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "companies.companyCode",
                        "description": "Filter by the company code of the billing account.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "companies.companyAccount",
                        "description": "Filter by the company account of the billing account.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "companies.siren",
                        "description": "Filter by the SIREN of the billing account.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Billing accounts matching the request.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/BillingAccount"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "BillingAccounts"
                ]
            }
        },
        "/billingAccounts/aggregate": {
            "get": {
                "operationId": "AggregateBillingAccounts",
                "summary": "Aggregate billing accounts",
                "description": "This method allows to count billing accounts grouped by one or several attributes and matching criterias.\n\nThis feature is useful for building dashboards.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API Key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupBy",
                        "description": "One or several attributes.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Indicators based on your Aggregation.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "BillingAccounts"
                ]
            }
        },
        "/billingAccounts/{billingAccountId}": {
            "get": {
                "operationId": "GetBillingAccount",
                "summary": "Get detail of a billing account.",
                "description": "Retrieve detail of a billing account.",
                "parameters": [
                    {
                        "name": "billingAccountId",
                        "description": "Identifier of a billing account.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BillingAccount"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "BillingAccounts"
                ]
            }
        },
        "/requests": {
            "get": {
                "operationId": "GetRequests",
                "summary": "Find Requests",
                "description": "Retrieve all requests matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "description": "Filter by identifiers.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "customerReference",
                        "description": "Filter by the Customer Reference",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "description": "Filter by status of the request",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "IN_PROGRESS",
                                "NEW",
                                "COMPLETED"
                            ]
                        }
                    },
                    {
                        "name": "customer.id",
                        "description": "Filter by Customer Identifiers",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "description": "Filter by type of Requests",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Flag for displaying all fields even if the value is null.",
                        "name": "displayNulls",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    },
                    {
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "name": "displayLinks",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Request"
                                    }
                                }
                            }
                        },
                        "headers": {
                            "X-Total-Count": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Number of total items matching the request."
                            },
                            "X-Result-Count": {
                                "schema": {
                                    "type": "integer"
                                },
                                "description": "Number of returned items matching the request."
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Requests"
                ]
            },
            "post": {
                "operationId": "SendRequest",
                "description": "Send a new request to Orange Business Services.",
                "summary": "Send a Request",
                "parameters": [
                    {
                        "in": "header",
                        "name": "X-API-KEY",
                        "description": "The API Key required for using Orange Business Services API.",
                        "schema": {
                            "type": "string"
                        },
                        "required": false
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The request body to send a request.",
                                "oneOf": [
                                    {
                                        "$ref": "#/components/schemas/OrderNewLineRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/ActivateLineRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/SuspendLineRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/RestoreLineRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/AddNewProductsRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/OrderEquipmentsRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/TerminateServicesRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/TerminateLineRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/ChangeSimRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/ChangeNumberRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/ChangeBillingAccountRequest"
                                    },
                                    {
                                        "$ref": "#/components/schemas/ChangeSubscriberRequest"
                                    }
                                ],
                                "additionalProperties": true,
                                "discriminator": {
                                    "propertyName": "type"
                                }
                            },
                            "examples": {
                                "Order new line": {
                                    "value": {
                                        "catalog": "MOBILE",
                                        "type": "ORDER_NEW_LINE",
                                        "customerReference": "<YOUR_REFERENCE>",
                                        "contact": "<YOUR_CONTACT_EMAIL>",
                                        "comment": "<COMMENT>",
                                        "properties": {
                                            "billingAccount": {
                                                "id": "<BILL_ACC>"
                                            },
                                            "subscriber": {
                                                "firstName": "<FIRSTNAME>",
                                                "lastName": "<LASTNAME>",
                                                "email": "OWNER@EMAIL.com"
                                            },
                                            "delivery": {
                                                "name": "<ADDRESS_NAME>",
                                                "localCompany": "<YOUR_COMPANY>",
                                                "email": "<DELIVERY_EMAIL>",
                                                "address": {
                                                    "street": "<STREET>",
                                                    "extendedStreet": null,
                                                    "postalCode": "<POSTAL_CODE>",
                                                    "locality": null,
                                                    "state": null,
                                                    "city": "<CITY>",
                                                    "country": "FR"
                                                },
                                                "phoneNumber": "0123456789"
                                            },
                                            "plan": {
                                                "id": "<PLAN_ID>"
                                            },
                                            "profile": {
                                                "id": "<PROFILE_ID>"
                                            },
                                            "services": [
                                                {
                                                    "id": "<SERVICE_ID>"
                                                }
                                            ],
                                            "device": {
                                                "id": "<DEVICE_ID>"
                                            }
                                        }
                                    }
                                },
                                "Activate line": {
                                    "value": {
                                        "customerReference": "<YOUR_REFERENCE>",
                                        "catalog": "MOBILE",
                                        "type": "ACTIVATE_LINE",
                                        "contact": "<YOUR_CONTACT_EMAIL>",
                                        "properties": {
                                            "subscription": {
                                                "id": "<SUBSCRIPTION_ID>"
                                            }
                                        }
                                    }
                                },
                                "Suspend line": {
                                    "value": {
                                        "customerReference": "<YOUR_REFERENCE>",
                                        "catalog": "MOBILE",
                                        "type": "SUSPEND_LINE",
                                        "contact": "<YOUR_CONTACT_EMAIL>",
                                        "properties": {
                                            "reason": "PERSONAL",
                                            "subscription": {
                                                "id": "<SUBSCRIPTION_ID>"
                                            }
                                        }
                                    }
                                },
                                "Restore line": {
                                    "value": {
                                        "customerReference": "<YOUR_REFERENCE>",
                                        "catalog": "MOBILE",
                                        "type": "RESTORE_LINE",
                                        "contact": "<YOUR_CONTACT_EMAIL>",
                                        "properties": {
                                            "reason": "PERSONAL",
                                            "subscription": {
                                                "id": "<SUBSCRIPTION_ID>"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "description": "The content of the body depends on the type of request."
                },
                "responses": {
                    "201": {
                        "description": "Created",
                        "headers": {
                            "Content-Location": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "411": {
                        "$ref": "#/components/responses/LengthRequired"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "413": {
                        "$ref": "#/components/responses/RequestEntityTooLarge"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "422": {
                        "$ref": "#/components/responses/UnprocessableEntity"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Requests"
                ]
            }
        },
        "/requests/aggregate": {
            "get": {
                "operationId": "AggregateRequests",
                "summary": "Aggregate requests",
                "description": "This method allows to count requests grouped by one or several attributes and matching criterias.\n\nThis feature is useful for building dashboards.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API Key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "groupBy",
                        "description": "One or several attributes.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Indicators based on your Aggregation.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Requests"
                ]
            }
        },
        "/requests/{requestId}": {
            "get": {
                "operationId": "GetRequest",
                "summary": "Get a request",
                "description": "Return the detail of a specific request",
                "parameters": [
                    {
                        "name": "requestId",
                        "description": "Identifier of a request.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Request"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Requests"
                ]
            }
        },
        "/catalog/plans": {
            "get": {
                "operationId": "FindCatalogPlans",
                "summary": "Find available plans.",
                "description": "Retrieve available plans matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "description": "Filter by identifiers.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Plans matching the request.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CatalogPlan"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/plans/{planId}": {
            "get": {
                "operationId": "GetCatalogPlan",
                "summary": "Get an available plan.",
                "description": "Return the detail of a specific plan.",
                "parameters": [
                    {
                        "name": "planId",
                        "description": "Identifier of a plan.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogPlan"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/profiles": {
            "get": {
                "operationId": "FindCatalogProfiles",
                "summary": "Find available profiles.",
                "description": "Retrieve available profiles matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "description": "Filter by identifiers.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Profiles matching the request.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CatalogProfile"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/profiles/{profileId}": {
            "get": {
                "operationId": "GetCatalogProfile",
                "summary": "Get an available profile.",
                "description": "Return the detail of a specific profile.",
                "parameters": [
                    {
                        "name": "profileId",
                        "description": "Identifier of a profile.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogProfile"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/services": {
            "get": {
                "operationId": "FindCatalogServices",
                "summary": "Find available services.",
                "description": "Retrieve available services matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "description": "Filter by identifiers.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Services matching the request.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CatalogService"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/services/{serviceId}": {
            "get": {
                "operationId": "GetCatalogService",
                "summary": "Get an available service.",
                "description": "Return the detail of a specific service.",
                "parameters": [
                    {
                        "name": "serviceId",
                        "description": "Identifier of a service.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogService"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/devices": {
            "get": {
                "operationId": "FindCatalogDevices",
                "summary": "Find available devices.",
                "description": "Retrieve available devices matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "description": "Filter by identifiers.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "compatiblePlans.id",
                        "description": "Filter by compatible plans.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Devices matching the request.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CatalogDevice"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/devices/search": {
            "post": {
                "operationId": "SearchCatalogDevices",
                "summary": "Search available devices in the given context.",
                "description": "Retrieve available devices matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The body of the request.",
                    "content": {
                        "application/json": {
                            "schema": {
                                "description": "The request body to send a request.",
                                "type": "object",
                                "properties": {
                                    "subscription": {
                                        "description": "Information about a subscription.",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "Identifier of the subscription.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "id"
                                        ]
                                    },
                                    "profile": {
                                        "description": "Information about a profile.",
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "description": "Identifier of the profile.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "id"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Devices matching the request.",
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/CatalogDevice"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/devices/{deviceId}": {
            "get": {
                "operationId": "GetCatalogDevice",
                "summary": "Get an available device.",
                "description": "Return the detail of a specific device.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    },
                    {
                        "name": "deviceId",
                        "description": "Identifier of a device.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogDevice"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/devices/{deviceId}/image": {
            "get": {
                "operationId": "GetCatalogDeviceImages",
                "summary": "Get the images of an available device.",
                "description": "Return the images of a specific device.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deviceId",
                        "description": "Identifier of a device.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Images matching the request.",
                                    "type": "array",
                                    "items": {
                                        "description": "Link to the image.",
                                        "type": "object",
                                        "properties": {
                                            "href": {
                                                "description": "Hypertext reference to the image.",
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/devices/{deviceId}/documents": {
            "parameters": [
                {
                    "name": "deviceId",
                    "description": "Identifier of a device.",
                    "in": "path",
                    "schema": {
                        "type": "string"
                    },
                    "required": true
                }
            ],
            "get": {
                "operationId": "GetCatalogDeviceDocuments",
                "summary": "Get the documents of an available device.",
                "description": "Return the documents of a specific device.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Documents matching the request.",
                                    "type": "array",
                                    "items": {
                                        "description": "Link to the document.",
                                        "type": "object",
                                        "properties": {
                                            "href": {
                                                "description": "Hypertext reference to the document.",
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/accessories": {
            "get": {
                "operationId": "FindCatalogAccessories",
                "summary": "Find available accessories.",
                "description": "Retrieve available accessories matching search criteria.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "id",
                        "description": "Filter by identifiers.",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Documents matching the request.",
                                    "type": "array",
                                    "items": {
                                        "description": "Link to the document.",
                                        "type": "object",
                                        "properties": {
                                            "href": {
                                                "description": "Hypertext reference to the document.",
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/accessories/{accessoryId}": {
            "get": {
                "operationId": "GetCatalogAccessory",
                "summary": "Get an available accessory.",
                "description": "Return the detail of a specific accessory.",
                "parameters": [
                    {
                        "name": "accessoryId",
                        "description": "Identifier of a accessory.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "displayLinks",
                        "description": "Flag for displaying the HATEOS links of linked ressources.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                false,
                                true
                            ]
                        }
                    },
                    {
                        "name": "displayNulls",
                        "description": "Flag for displaying all fields even if the value is null.",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "enum": [
                                true,
                                false
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CatalogAccessory"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/accessories/{accessoryId}/images": {
            "parameters": [
                {
                    "name": "accessoryId",
                    "description": "Identifier of an accessory.",
                    "in": "path",
                    "schema": {
                        "type": "string"
                    },
                    "required": true
                }
            ],
            "get": {
                "operationId": "GetCatalogAccessoryImages",
                "summary": "Get the images of an available accessory.",
                "description": "Return the images of a specific accessory.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Images matching the request.",
                                    "type": "array",
                                    "items": {
                                        "description": "Link to the image.",
                                        "type": "object",
                                        "properties": {
                                            "href": {
                                                "description": "Hypertext reference to the image.",
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/accessories/{accessoryId}/documents": {
            "parameters": [
                {
                    "name": "accessoryId",
                    "description": "Identifier of an accessory.",
                    "in": "path",
                    "schema": {
                        "type": "string"
                    },
                    "required": true
                }
            ],
            "get": {
                "operationId": "GetCatalogAccessoryDocuments",
                "summary": "Get the documents of an available accessory.",
                "description": "Return the documents of a specific accessory.",
                "parameters": [
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "offset",
                        "description": "The index of the first element to retrieve. Zero is the first item of the collection.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 0
                        }
                    },
                    {
                        "name": "limit",
                        "description": "The maximum number of items to retrieve.",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": 250,
                            "maximum": 5000
                        }
                    },
                    {
                        "name": "sort",
                        "description": "Sort the result by the specified attribute. The descending order can be specify by prefixing the attribute name with a \"-\" sign. __Example: sort=-name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "description": "Allow to have a partial response with only required attributes. The query parameter must contain a list of attributes separated by a comma.\\s __Example: fields=id,status",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "headers": {
                            "X-Total-Count": {
                                "description": "Number of total items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            },
                            "X-Result-Count": {
                                "description": "Number of returned items matching the request.",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Documents matching the request.",
                                    "type": "array",
                                    "items": {
                                        "description": "Link to the document.",
                                        "type": "object",
                                        "properties": {
                                            "href": {
                                                "description": "Hypertext reference to the document.",
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/images/{imageId}": {
            "get": {
                "operationId": "GetCatalogImage",
                "summary": "Get an image of an available device or accessory.",
                "description": "Return an image of a specific device or accessory.",
                "parameters": [
                    {
                        "name": "imageId",
                        "description": "Identifier of an image.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "image/*": {
                                "schema": {
                                    "description": "The image.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/catalog/documents/{documentId}": {
            "get": {
                "operationId": "GetCatalogDocument",
                "summary": "Get a document of an available device or accessory.",
                "description": "Return a document (manual, technical sheet, etc.) of a specific device or accessory.",
                "parameters": [
                    {
                        "name": "documentId",
                        "description": "Identifier of a document.",
                        "in": "path",
                        "schema": {
                            "type": "string"
                        },
                        "required": true
                    },
                    {
                        "name": "X-API-KEY",
                        "description": "The API key required for using Orange Business Services API.",
                        "in": "header",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/pdf": {
                                "schema": {
                                    "description": "The document.",
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/BadRequest"
                    },
                    "401": {
                        "$ref": "#/components/responses/Unauthorized"
                    },
                    "403": {
                        "$ref": "#/components/responses/Denied"
                    },
                    "404": {
                        "$ref": "#/components/responses/NotFound"
                    },
                    "406": {
                        "$ref": "#/components/responses/NotAcceptable"
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "412": {
                        "$ref": "#/components/responses/PreconditionFailed"
                    },
                    "414": {
                        "$ref": "#/components/responses/RequestURITooLong"
                    },
                    "415": {
                        "$ref": "#/components/responses/UnsupportedMediaType"
                    },
                    "429": {
                        "$ref": "#/components/responses/TooManyRequests"
                    },
                    "500": {
                        "$ref": "#/components/responses/InternalServerError"
                    },
                    "502": {
                        "$ref": "#/components/responses/BadGateway"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    },
                    "504": {
                        "$ref": "#/components/responses/GatewayTimeout"
                    }
                },
                "tags": [
                    "Catalog"
                ]
            }
        },
        "/me": {
            "get": {
                "operationId": "GetMe",
                "summary": "Get user information.",
                "description": "This endpoint provides information on the connected user.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ME"
                                }
                            }
                        }
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "tags": [
                    "Miscellaneous"
                ]
            }
        },
        "/doc": {
            "get": {
                "operationId": "DownloadSwagger",
                "summary": "Download Swagger",
                "description": "Provide the current version of the Swagger File. <hr/>**_NOTE:_** The API key is not required for this end-point.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "Swagger file.",
                                    "type": "object"
                                }
                            }
                        }
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "tags": [
                    "Miscellaneous"
                ]
            }
        },
        "/status": {
            "get": {
                "operationId": "GetStatus",
                "summary": "Get API Status",
                "description": "This method provides the current status of the API.",
                "responses": {
                    "200": {
                        "description": "Service status.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Status information about the API.",
                                    "properties": {
                                        "name": {
                                            "type": "string",
                                            "description": "Name of the API."
                                        },
                                        "status": {
                                            "type": "string",
                                            "description": "Status of the API.",
                                            "enum": [
                                                "ok",
                                                "ko"
                                            ]
                                        },
                                        "version": {
                                            "type": "string",
                                            "description": "The version of the API (major dot minor dot patch numbers)."
                                        }
                                    }
                                }
                            }
                        }
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "tags": [
                    "Miscellaneous"
                ]
            }
        },
        "/version": {
            "get": {
                "operationId": "GetVersion",
                "summary": "Get API Version",
                "description": "Return the current version of the API including Major Release number, Minor Release number and patch number",
                "responses": {
                    "200": {
                        "description": "OK",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "description": "Version information body.",
                                    "properties": {
                                        "version": {
                                            "description": "Information about the version of the API.",
                                            "type": "object",
                                            "properties": {
                                                "major": {
                                                    "description": "Major number of the API version",
                                                    "type": "string"
                                                },
                                                "minor": {
                                                    "description": "Minor number of the API version",
                                                    "type": "string"
                                                },
                                                "patch": {
                                                    "description": "Patch number of the API version",
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "major",
                                                "minor"
                                            ]
                                        },
                                        "deprecated": {
                                            "description": "Flag indicating if the API is deprecated",
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "deprecated"
                                    ]
                                }
                            }
                        }
                    },
                    "408": {
                        "$ref": "#/components/responses/RequestTimeout"
                    },
                    "503": {
                        "$ref": "#/components/responses/ServiceUnavailable"
                    }
                },
                "tags": [
                    "Miscellaneous"
                ]
            }
        }
    },
    "components": {
        "schemas": {
            "Subscription": {
                "title": "Subscription",
                "description": "Information about a subscription.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the subscription.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the subscription.",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status of the line.",
                        "type": "string",
                        "enum": [
                            "INSTALLING",
                            "PENDING_ACTIVATION",
                            "OPERATIONAL",
                            "SUSPENDED",
                            "TERMINATED",
                            "NOT_LISTED",
                            "UNKNOWN"
                        ]
                    },
                    "customer": {
                        "description": "Information about the customer.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the customer.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the customer.",
                                "type": "string"
                            }
                        }
                    },
                    "billingAccount": {
                        "description": "Information about the billing account.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the billing account.",
                                "type": "string"
                            }
                        }
                    },
                    "mobileLine": {
                        "description": "Information about the mobile line.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Phone number of the mobile line.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of the mobile line.",
                                "type": "string",
                                "enum": [
                                    "GSM",
                                    "DATA",
                                    "OTHER",
                                    "UNKNOWN"
                                ]
                            }
                        }
                    },
                    "simCards": {
                        "description": "Information about the SIM cards associated to the mobile line.",
                        "type": "array",
                        "items": {
                            "description": "Information about a SIM card.",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Number of the SIM card.",
                                    "type": "string"
                                },
                                "pukCode": {
                                    "description": "Code PUK of the SIM card.",
                                    "type": "string"
                                },
                                "type": {
                                    "description": "Type of the SIM card.",
                                    "type": "string",
                                    "enum": [
                                        "MAIN_SIM",
                                        "TWIN_SIm"
                                    ]
                                }
                            }
                        }
                    },
                    "plan": {
                        "description": "Information about the plan chosen for the subscription.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the plan.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the plan.",
                                "type": "string"
                            },
                            "startedAt": {
                                "description": "Date when the plan was activated. Use the ISO-8601 format. Example: 2015-04-09T12:07:56Z",
                                "type": "string",
                                "format": "date-time"
                            },
                            "terminatedAt": {
                                "description": "Date when the plan was terminated. Use the ISO-8601 format. Example: 2015-04-09T12:07:56Z",
                                "type": "string",
                                "format": "date-time"
                            },
                            "terms": {
                                "$ref": "#/components/schemas/ProductsOfferingTerms"
                            }
                        }
                    },
                    "profile": {
                        "description": "Information about the profile chosen for the subscription.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the profile.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the profile.",
                                "type": "string"
                            },
                            "startedAt": {
                                "description": "Date when the profile was activated. Use the ISO-8601 format. Example: 2015-04-09T12:07:56Z",
                                "type": "string",
                                "format": "date-time"
                            },
                            "terminatedAt": {
                                "description": "Date when the profile was terminated. Use the ISO-8601 format. Example: 2015-04-09T12:07:56Z",
                                "type": "string",
                                "format": "date-time"
                            },
                            "terms": {
                                "$ref": "#/components/schemas/ProductsOfferingTerms"
                            }
                        }
                    },
                    "services": {
                        "description": "Information about the services chosen for the subscription.",
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Identifier of the service.",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Name of the service.",
                                    "type": "string"
                                },
                                "portfolio": {
                                    "description": "Portfolio of the service.",
                                    "type": "string"
                                },
                                "startedAt": {
                                    "description": "Date when the service was activated. Use the ISO-8601 format. Example: 2015-04-09T12:07:56Z",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "terminatedAt": {
                                    "description": "Date when the service was terminated. Use the ISO-8601 format. Example: 2015-04-09T12:07:56Z",
                                    "type": "string",
                                    "format": "date-time"
                                },
                                "terms": {
                                    "$ref": "#/components/schemas/ProductsOfferingTerms"
                                }
                            }
                        }
                    },
                    "device": {
                        "description": "Information about the device associated to the mobile line.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "IMEI of the device.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Model of the device.",
                                "type": "string"
                            },
                            "brand": {
                                "description": "Brand of the device.",
                                "type": "string"
                            },
                            "type": {
                                "description": "Type of the device.",
                                "type": "string",
                                "enum": [
                                    "MOBILE"
                                ]
                            }
                        }
                    },
                    "subscriber": {
                        "$ref": "#/components/schemas/Individual"
                    },
                    "startedAt": {
                        "description": "Date when the subscription was ordered.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "endedAt": {
                        "description": "Date when the subscription will be terminated. Use the ISO-8601 format. Example: _2015-04-09T12:07:56Z_",
                        "type": "string",
                        "format": "date-time"
                    },
                    "activatedAt": {
                        "description": "Date when the subscription has been activated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "lastORTDate": {
                        "description": "Date of the last ORT request. Use the ISO-8601 format. Example: 2015-04-09T12:07:56Z",
                        "type": "string",
                        "format": "date-time"
                    },
                    "eligibilityTestedAt": {
                        "description": "Data when a new ORT request will be possible . Use the ISO-8601 format. Example: 2015-04-09T12:07:56Z ",
                        "type": "string",
                        "format": "date-time"
                    },
                    "terminatedAt": {
                        "description": "Date when the subscription has been terminated.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "description": "Creation date of the record in Orange Database.  Use the ISO-8601 format. Example: _2015-04-09T12:07:56Z_",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Last update date of the record in Orange Databases.  Use the ISO-8601 format. Example: _2015-04-09T12:07:56Z_",
                        "type": "string",
                        "format": "date-time"
                    },
                    "_links": {
                        "description": "Links to related resources.",
                        "type": "object",
                        "properties": {
                            "self": {
                                "description": "Link to the subscription itself.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the subscription itself.",
                                        "type": "string"
                                    }
                                }
                            },
                            "simCards": {
                                "description": "Link to the associated SIM card.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the associated SIM card.",
                                        "type": "string"
                                    }
                                }
                            },
                            "plan": {
                                "description": "Link to the chosen plan.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the chosen plan.",
                                        "type": "string"
                                    }
                                }
                            },
                            "profile": {
                                "description": "Link to the chosen profile.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the chosen profile.",
                                        "type": "string"
                                    }
                                }
                            },
                            "services": {
                                "description": "Links to the chosen services.",
                                "type": "array",
                                "items": {
                                    "description": "Link to the chosen services.",
                                    "type": "object",
                                    "properties": {
                                        "href": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "device": {
                                "description": "Link to the associated device.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the associated device.",
                                        "type": "string"
                                    }
                                }
                            },
                            "subscriber": {
                                "description": "Link to the owner of the subscription.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the owner of the subscription.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "name"
                ]
            },
            "SimCard": {
                "title": "SIM card",
                "description": "Information about a SIM card.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Number of the SIM card.",
                        "type": "string"
                    },
                    "pukCode": {
                        "description": "Code PUK of the SIM card.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of the SIM Card.",
                        "type": "string",
                        "enum": [
                            "GSM",
                            "DATA"
                        ]
                    },
                    "createdAt": {
                        "description": "Creation date of the record in Orange Database.  Use the ISO-8601 format. Example: _2015-04-09T12:07:56Z_",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Last update date of the record in Orange Databases.  Use the ISO-8601 format. Example: _2015-04-09T12:07:56Z_",
                        "type": "string",
                        "format": "date-time"
                    },
                    "_links": {
                        "description": "Links to related resources.",
                        "type": "object",
                        "properties": {
                            "self": {
                                "description": "Link to the SIM card itself.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the SIM card itself.",
                                        "type": "string"
                                    }
                                }
                            },
                            "subscription": {
                                "description": "Link to the associated subscription.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the associated subscription.",
                                        "type": "string"
                                    }
                                }
                            },
                            "device": {
                                "description": "Link to the associated device.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the associated device.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Individual": {
                "title": "Individual",
                "description": "Information about an individual.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the individual.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the individual.",
                        "type": "string"
                    },
                    "firstName": {
                        "description": "First name of the individual.",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "Last name of the individual.",
                        "type": "string"
                    },
                    "email": {
                        "description": "Email of the individual.",
                        "type": "string",
                        "format": "email"
                    },
                    "mobile": {
                        "description": "Mobile nuber of the individual.",
                        "type": "string"
                    },
                    "phone": {
                        "description": "Phone number of the individual.",
                        "type": "string"
                    }
                }
            },
            "BillingAccount": {
                "title": "Billing account",
                "description": "Information about a billing account.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the billing account.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of the billing account.",
                        "type": "string",
                        "enum": [
                            "SUBSCRIPTIONS_EQUIPMENTS",
                            "EQUIPMENTS_ONLY"
                        ]
                    },
                    "name": {
                        "description": "Name of the billing account.",
                        "type": "string"
                    },
                    "customers": {
                        "title": "Perimeter of the billing account",
                        "description": "Information about the companies associated to the billing account.",
                        "type": "array",
                        "items": {
                            "description": "Information about a company associated to the billing account.",
                            "type": "object",
                            "properties": {
                                "groupCode": {
                                    "description": "Group code of the company.",
                                    "type": "string"
                                },
                                "companyCode": {
                                    "description": "Code of the company.",
                                    "type": "string"
                                },
                                "companyAccount": {
                                    "description": "Account of the company.",
                                    "type": "string"
                                },
                                "siren": {
                                    "description": "SIREN of the company.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "companyCode",
                                "companyAccount",
                                "groupCode",
                                "siren"
                            ]
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Creation date of the record in Orange Database. Use the ISO-8601 format. Example: _2015-04-09T12:07:56Z_",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the record in Orange Databases. Use the ISO-8601 format. Example: _2015-04-09T12:07:56Z_",
                        "format": "date-time"
                    },
                    "_links": {
                        "description": "Links to related resources.",
                        "type": "object",
                        "properties": {
                            "self": {
                                "description": "Link to the billing account itself.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the billing account itself.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "companies"
                ]
            },
            "RequestBase": {
                "title": "Request base",
                "description": "Base object for all requests.",
                "type": "object",
                "properties": {
                    "customerReference": {
                        "description": "Reference set by the customer for the request.",
                        "type": "string"
                    },
                    "contact": {
                        "description": "Contact for the request.",
                        "type": "string"
                    },
                    "comment": {
                        "description": "Comment on the request.",
                        "type": "string"
                    },
                    "catalog": {
                        "description": "Catalog to which the request belongs.",
                        "type": "string",
                        "enum": [
                            "MOBILE"
                        ]
                    }
                },
                "required": [
                    "customerReference",
                    "contact",
                    "catalog"
                ]
            },
            "OrderNewLineRequest": {
                "title": "Request body to order a new line.",
                "description": "Request body to order a new line.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "ORDER_NEW_LINE"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/OrderNewLineRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "OrderNewLineRequestProperties": {
                "description": "Additional properties to order a new line.",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BillingAccountsProperties"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "delivery": {
                                "$ref": "#/components/schemas/Delivery"
                            },
                            "subscriber": {
                                "description": "Information about a subscriber.",
                                "type": "object",
                                "properties": {
                                    "firstName": {
                                        "description": "First name of the subscriber.",
                                        "type": "string"
                                    },
                                    "lastName": {
                                        "description": "Last name of the subscriber.",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "Email of the subscriber.",
                                        "type": "string",
                                        "format": "email"
                                    }
                                },
                                "required": [
                                    "firstName",
                                    "lastName",
                                    "email"
                                ]
                            },
                            "portability": {
                                "description": "Properties used to port a number.",
                                "type": "object",
                                "properties": {
                                    "date": {
                                        "description": "Desired date for the portability of the given number.",
                                        "type": "string",
                                        "format": "date-time"
                                    },
                                    "RIOCode": {
                                        "description": "RIO code associated to the given number.",
                                        "type": "string",
                                        "maxLength": 12
                                    },
                                    "phoneNumber": {
                                        "description": "Phone number to port.",
                                        "type": "string",
                                        "maxLength": 14
                                    }
                                },
                                "required": [
                                    "date",
                                    "RIOCode",
                                    "phoneNumber"
                                ]
                            },
                            "sim": {
                                "description": "Information about the SIM card.",
                                "type": "object",
                                "oneOf": [
                                    {
                                        "title": "SIM card in stock",
                                        "description": "Required properties for SIM card in stock.",
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "description": "Use a SIM card in stock.",
                                                "type": "string",
                                                "enum": [
                                                    "SIM_CARD"
                                                ]
                                            },
                                            "id": {
                                                "description": "Identifier of the SIM card in stock.",
                                                "type": "string",
                                                "maxLength": 13
                                            }
                                        },
                                        "required": [
                                            "type",
                                            "id"
                                        ]
                                    },
                                    {
                                        "title": "e-SIM",
                                        "description": "Required properties for e-SIM.",
                                        "type": "object",
                                        "properties": {
                                            "type": {
                                                "description": "Use an e-SIM.",
                                                "type": "string",
                                                "enum": [
                                                    "E_SIM"
                                                ]
                                            },
                                            "email": {
                                                "description": "Email that will receive the QR code to activate the e-SIM.",
                                                "type": "string",
                                                "maxLength": 150
                                            }
                                        },
                                        "required": [
                                            "type",
                                            "email"
                                        ]
                                    }
                                ],
                                "discriminator": {
                                    "propertyName": "type"
                                }
                            },
                            "plan": {
                                "description": "Information about the plan.",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "Identifier of the plan.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ProductsOffering"
                    }
                ],
                "required": [
                    "billingAccount",
                    "subscriber",
                    "delivery",
                    "profile"
                ]
            },
            "ActivateLineRequest": {
                "title": "Request body to activate a mobile line.",
                "description": "Request body to activate a mobile line.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "ACTIVATE_LINE"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/ActivateLineRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "ActivateLineRequestProperties": {
                "description": "Additional properties to activate a mobile line.",
                "type": "object",
                "properties": {
                    "subscription": {
                        "description": "Information about the subscription.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the subscription.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "subscription"
                ]
            },
            "SuspendLineRequest": {
                "title": "Request body to suspend a line.",
                "description": "Request body to suspend a line.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "SUSPEND_LINE"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/SuspendLineRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "SuspendLineRequestProperties": {
                "description": "Additional properties to suspend a line.",
                "type": "object",
                "properties": {
                    "reason": {
                        "description": "Reason of the suspension.",
                        "type": "string",
                        "enum": [
                            "PERSONAL",
                            "STOLEN",
                            "LOST"
                        ]
                    },
                    "subscription": {
                        "description": "Information about the subscription.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the subscription.",
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "reason",
                    "subscription"
                ]
            },
            "RestoreLineRequest": {
                "title": "Request body to restore a line.",
                "description": "Request body to restore a line.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "RESTORE_LINE"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/RestoreLineRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "RestoreLineRequestProperties": {
                "description": "Additional properties to restore a line.",
                "type": "object",
                "properties": {
                    "reason": {
                        "description": "Reason of the restoration.",
                        "type": "string",
                        "enum": [
                            "PERSONAL",
                            "LOST",
                            "STOLEN"
                        ]
                    },
                    "subscription": {
                        "description": "Information about the subscription.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the subscription.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "reason",
                    "subscription"
                ]
            },
            "AddNewProductsRequest": {
                "title": "Request body to order additional products for an existing subscription.",
                "description": "Request body to order additional products for an existing subscription.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "ADD_NEW_PRODUCTS"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/AddNewProductsRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "AddNewProductsRequestProperties": {
                "description": "Additional properties to order products for an existing subscription.",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BillingAccountsProperties"
                    },
                    {
                        "description": "Additional properties.",
                        "type": "object",
                        "properties": {
                            "subscription": {
                                "description": "Information about the existing subscription.",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "Identifier of the existing subscription.",
                                        "type": "string",
                                        "maxLength": 11
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            },
                            "delivery": {
                                "$ref": "#/components/schemas/Delivery"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ProductsOffering"
                    },
                    {
                        "description": "The products to order.",
                        "type": "object",
                        "properties": {
                            "device": {
                                "description": "A device to order.",
                                "type": "object",
                                "properties": {
                                    "isSimCardExpedited": {
                                        "type": "boolean",
                                        "description": "A value that indicates whether a SIM card should be sent with this device.",
                                        "default": false
                                    }
                                }
                            },
                            "accessories": {
                                "description": "The accessories to order.",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Quantity"
                                }
                            }
                        }
                    }
                ],
                "required": [
                    "billingAccount",
                    "subscription"
                ]
            },
            "OrderEquipmentsRequest": {
                "title": "Request body to order additional devices or accessories without an existing subscription.",
                "description": "Request body to order additional devices or accessories without an existing subscription.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "ORDER_EQUIPMENTS"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/OrderEquipmentsRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "OrderEquipmentsRequestProperties": {
                "description": "Additional properties to order devices or accessories without an existing subscription.",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BillingAccountProperties"
                    },
                    {
                        "description": "Additional properties.",
                        "type": "object",
                        "properties": {
                            "delivery": {
                                "$ref": "#/components/schemas/Delivery"
                            }
                        }
                    },
                    {
                        "description": "The equipments to order.",
                        "type": "object",
                        "properties": {
                            "devices": {
                                "description": "The devices to order.",
                                "type": "array",
                                "items": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/Device"
                                        },
                                        {
                                            "$ref": "#/components/schemas/Quantity"
                                        }
                                    ]
                                }
                            },
                            "accessories": {
                                "description": "The accessories to order.",
                                "type": "array",
                                "items": {
                                    "allOf": [
                                        {
                                            "$ref": "#/components/schemas/Accessory"
                                        },
                                        {
                                            "$ref": "#/components/schemas/Quantity"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                ],
                "required": [
                    "billingAccount",
                    "delivery"
                ]
            },
            "TerminateServicesRequest": {
                "title": "Request body to terminate a profile and/or options on an existing subscription.",
                "description": "Request body to terminate a profile and/or options on an existing subscription.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "TERMINATE_SERVICES"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/TerminateServicesRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "TerminateServicesRequestProperties": {
                "description": "Additional properties to terminate a profile and/or options on an existing subscription.",
                "type": "object",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BillingAccountProperties"
                    },
                    {
                        "description": "Additional properties.",
                        "type": "object",
                        "properties": {
                            "subscription": {
                                "description": "Information about the existing subscription.",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "Identifier of the existing subscription.",
                                        "type": "string",
                                        "maxLength": 11
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            },
                            "profile": {
                                "description": "Information about the profile to terminate.",
                                "type": "object",
                                "properties": {
                                    "date": {
                                        "description": "Desired date for the termination of the given profile.",
                                        "type": "string",
                                        "format": "date-time"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "$ref": "#/components/schemas/ServicesOffering"
                    }
                ],
                "required": [
                    "billingAccount",
                    "subscription"
                ]
            },
            "TerminateLineRequest": {
                "title": "Request body to terminate an existing subscription.",
                "description": "Request body to terminate an existing subscription.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "TERMINATE_LINE"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/TerminateLineRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "TerminateLineRequestProperties": {
                "description": "Additional properties to terminate an existing subscription.",
                "type": "object",
                "properties": {
                    "subscription": {
                        "description": "Information about the existing subscription.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the existing subscription.",
                                "type": "string",
                                "maxLength": 11
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "date": {
                        "description": "Desired date for the termination of the given subscription.",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "subscription",
                    "date"
                ]
            },
            "ChangeSimRequest": {
                "title": "Request body to change a SIM card.",
                "description": "Request body to change a SIM card.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "CHANGE_SIM"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/ChangeSimRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "ChangeSimRequestProperties": {
                "description": "Additional properties to change a SIM card.",
                "type": "object",
                "properties": {
                    "delivery": {
                        "$ref": "#/components/schemas/Delivery"
                    },
                    "subscription": {
                        "description": "Information about the existing subscription.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the subscription.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    },
                    "sim": {
                        "description": "Information about the SIM card.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the SIM card.",
                                "type": "string",
                                "enum": [
                                    "MAIN_SIM",
                                    "TWIN_SIM"
                                ]
                            },
                            "id": {
                                "description": "Identifier of the SIM card in stock.",
                                "type": "string",
                                "maxLength": 13
                            }
                        },
                        "required": [
                            "type"
                        ]
                    }
                },
                "required": [
                    "delivery",
                    "subscription",
                    "sim"
                ]
            },
            "ChangeNumberRequest": {
                "title": "Request body to change a line number.",
                "description": "Request body to change a line number.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "CHANGE_NUMBER"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/ChangeNumberRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "ChangeNumberRequestProperties": {
                "description": "Additional properties to change a line number.",
                "type": "object",
                "properties": {
                    "subscription": {
                        "description": "Information about the existing subscription.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the subscription.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                },
                "required": [
                    "subscription"
                ]
            },
            "ChangeBillingAccountRequest": {
                "title": "Request body to update the billing account of a line.",
                "description": "Request body to update the billing account of a line.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "CHANGE_BILLING_ACCOUNT"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/ChangeBillingAccountRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "ChangeBillingAccountRequestProperties": {
                "description": "Additional properties to update the billing account of a line.",
                "type": "object",
                "allOf": [
                    {
                        "description": "Additional properties.",
                        "type": "object",
                        "properties": {
                            "subscriber": {
                                "description": "Information about the existing subscriber.",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "Identifier of the subscriber.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            },
                            "billingAccount": {
                                "description": "Information about the existing billingAccount.",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "description": "Identifier of the billingAccount.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        },
                        "required": [
                            "subscriber",
                            "billingAccount"
                        ]
                    },
                    {
                        "$ref": "#/components/schemas/BillingAccountProperties"
                    }
                ]
            },
            "ChangeSubscriberRequest": {
                "title": "Request body to update the owner of a line.",
                "description": "Request body to update the owner of a line.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestBase"
                    },
                    {
                        "description": "Body of the request.",
                        "type": "object",
                        "properties": {
                            "type": {
                                "description": "Type of the request.",
                                "type": "string",
                                "enum": [
                                    "CHANGE_SUBSCRIBER"
                                ]
                            },
                            "properties": {
                                "$ref": "#/components/schemas/ChangeSubscriberRequestProperties"
                            }
                        },
                        "required": [
                            "type",
                            "properties"
                        ]
                    }
                ]
            },
            "ChangeSubscriberRequestProperties": {
                "description": "Additional properties to update the owner of a line.",
                "type": "object",
                "properties": {
                    "subscriber": {
                        "description": "Information about a subscriber.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the subscription.",
                                "type": "string"
                            },
                            "firstname": {
                                "description": "First name of the subscriber.",
                                "type": "string"
                            },
                            "lastname": {
                                "description": "Last name of the subscriber.",
                                "type": "string"
                            }
                        },
                        "required": [
                            "id",
                            "firstname",
                            "lastname"
                        ]
                    }
                },
                "required": [
                    "subscriber"
                ]
            },
            "BillingAccountProperties": {
                "description": "Properties of a billing account.",
                "type": "object",
                "properties": {
                    "billingAccount": {
                        "description": "Information about a billing account.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the billing account.",
                                "type": "string",
                                "maxLength": 10
                            }
                        },
                        "required": [
                            "id"
                        ]
                    }
                }
            },
            "BillingAccountsProperties": {
                "description": "Properties of two billing accounts.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BillingAccountProperties"
                    },
                    {
                        "description": "Properties of a billing account that will be charged for the devices and accessories.",
                        "type": "object",
                        "properties": {
                            "equipmentsBillingAccount": {
                                "description": "Information about a billing account that will be charged for the devices and accessories.",
                                "type": "object",
                                "properties": {
                                    "id": {
                                        "type": "string",
                                        "description": "Identifier of the billing account that will be charged for the devices and accessories.",
                                        "maxLength": 10
                                    }
                                },
                                "required": [
                                    "id"
                                ]
                            }
                        }
                    }
                ]
            },
            "ProductsOffering": {
                "description": "Products offering.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ServicesOffering"
                    },
                    {
                        "$ref": "#/components/schemas/EquipmentsOffering"
                    }
                ]
            },
            "ServicesOffering": {
                "description": "A profile and its services.",
                "type": "object",
                "properties": {
                    "profile": {
                        "$ref": "#/components/schemas/Profile"
                    },
                    "services": {
                        "description": "The services.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Service"
                        }
                    }
                }
            },
            "Profile": {
                "description": "Information about a profile.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the profile.",
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "Service": {
                "type": "object",
                "description": "Information about a service.",
                "properties": {
                    "id": {
                        "description": "Identifier of the service.",
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "EquipmentsOffering": {
                "description": "A device and its accessories.",
                "type": "object",
                "properties": {
                    "device": {
                        "$ref": "#/components/schemas/Device"
                    },
                    "accessories": {
                        "description": "The accessories.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Accessory"
                        }
                    }
                }
            },
            "Device": {
                "type": "object",
                "description": "Information about a device.",
                "properties": {
                    "id": {
                        "description": "Identifier of the device.",
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "Accessory": {
                "description": "Information about an accessory.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the accessory.",
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ]
            },
            "ProductsOfferingTerms": {
                "description": "Products offering terms.",
                "type": "object",
                "properties": {
                    "type": {
                        "description": "Type of the terms.",
                        "type": "string",
                        "enum": [
                            "COMMITMENT"
                        ]
                    },
                    "duration": {
                        "description": "Duration of the terms.",
                        "type": "integer"
                    },
                    "termination": {
                        "description": "Type of termination.",
                        "type": "string",
                        "enum": [
                            "END_OF_MONTH",
                            "IMMEDIATE"
                        ]
                    }
                },
                "required": [
                    "type",
                    "duration",
                    "termination"
                ]
            },
            "Quantity": {
                "description": "Number of products to order.",
                "type": "object",
                "properties": {
                    "quantity": {
                        "description": "Number of products to order.",
                        "type": "integer",
                        "minimum": 1,
                        "maximum": 200,
                        "default": 1
                    }
                }
            },
            "Delivery": {
                "description": "Information about the delivery.",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the entity.",
                        "type": "string",
                        "maxLength": 30
                    },
                    "localCompany": {
                        "description": "Trading or business name.",
                        "type": "string",
                        "maxLength": 30
                    },
                    "email": {
                        "description": "Email to contact for the delivery.",
                        "type": "string",
                        "maxLength": 100
                    },
                    "address ": {
                        "$ref": "#/components/schemas/Address"
                    },
                    "phoneNumber": {
                        "description": "Phone number to contact for the delivery.",
                        "type": "string",
                        "maxLength": 10
                    }
                },
                "required": [
                    "name",
                    "email",
                    "address",
                    "phoneNumber"
                ]
            },
            "Request": {
                "description": "A request recorded via the Mobile API.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the request",
                        "type": "string"
                    },
                    "customerReference": {
                        "description": "Reference set by the customer for the request",
                        "type": "string"
                    },
                    "contact": {
                        "description": "Contact for the request.",
                        "type": "string"
                    },
                    "comment": {
                        "description": "Comment on the request",
                        "type": "string"
                    },
                    "catalog": {
                        "description": "Catalog to which the request belongs.",
                        "type": "string",
                        "enum": [
                            "MOBILE"
                        ]
                    },
                    "type": {
                        "description": "Type of Request",
                        "type": "string",
                        "enum": [
                            "ORDER_NEW_LINE",
                            "ACTIVATE_LINE",
                            "SUSPEND_LINE",
                            "RESTORE_LINE",
                            "ADD_NEW_PRODUCTS",
                            "ORDER_EQUIPMENTS",
                            "TERMINATE_SERVICES",
                            "TERMINATE_LINE",
                            "CHANGE_SIM",
                            "CHANGE_NUMBER"
                        ]
                    },
                    "status": {
                        "description": "Status of the request.",
                        "type": "string",
                        "enum": [
                            "NEW",
                            "VALIDATED",
                            "IN_PROGRESS",
                            "COMPLETED",
                            "FAILED"
                        ]
                    },
                    "customer": {
                        "description": "Information about the customer.",
                        "type": "object",
                        "properties": {
                            "id": {
                                "description": "Identifier of the customer.",
                                "type": "string"
                            },
                            "name": {
                                "description": "Name of the customer.",
                                "type": "string"
                            }
                        }
                    },
                    "issuedAt": {
                        "description": "Date of submission of the request.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "createdAt": {
                        "description": "Creation date of the record in Orange Systems.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "description": "Date of the last update on the record in Orange Systems.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "_links": {
                        "description": "Links to related resources.",
                        "type": "object",
                        "properties": {
                            "self": {
                                "description": "Link to the request itself.",
                                "type": "object",
                                "properties": {
                                    "href": {
                                        "description": "Hypertext reference to the request itself.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "required": [
                    "type"
                ]
            },
            "Address": {
                "description": "Model of an address.",
                "type": "object",
                "properties": {
                    "street": {
                        "description": "Name of the street.",
                        "type": "string"
                    },
                    "extendedStreet": {
                        "description": "Additional information on the  street.",
                        "type": "string"
                    },
                    "locality": {
                        "description": "Locality of the address.\n_Example: Sophia-Antipolis_",
                        "type": "string"
                    },
                    "postalCode": {
                        "description": "PostalCode (ZipCode) of the address.",
                        "type": "string"
                    },
                    "city": {
                        "description": "City or town of the address",
                        "type": "string"
                    },
                    "state": {
                        "description": "Federated entity of the address (State, Canton, Province, Bundesland,etc)",
                        "type": "string"
                    },
                    "country": {
                        "description": "Country of the address",
                        "type": "string",
                        "enum": [
                            "FR"
                        ]
                    }
                },
                "required": [
                    "street",
                    "postalCode",
                    "city"
                ]
            },
            "CatalogPlan": {
                "title": "Plan in the catalog",
                "description": "Information about a plan in the catalog.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the plan.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the plan.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the plan.",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "Date of the last update for the plan.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "period": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "isCompatibleWithPortability": {
                        "description": "A value that indicates whether this plan is compatible with the portability of a line.",
                        "type": "boolean"
                    },
                    "companies": {
                        "description": "Customer companies that can have access to the plan.",
                        "type": "array",
                        "items": {
                            "description": "Information about a customer company.",
                            "type": "object",
                            "properties": {
                                "groupCode": {
                                    "description": "Identifier of the customer group.",
                                    "type": "string"
                                },
                                "groupName": {
                                    "description": "Name of the customer group.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "groupCode",
                                "groupName"
                            ]
                        }
                    },
                    "compatibleProfiles": {
                        "description": "Profiles that can be ordered with the plan.",
                        "type": "array",
                        "items": {
                            "description": "Information about a profile.",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Identifier of the profile.",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "terms": {
                        "$ref": "#/components/schemas/ProductsOfferingTerms"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "description",
                    "updatedAt",
                    "period",
                    "isCompatibleWithPortability",
                    "companies",
                    "compatibleProfiles"
                ]
            },
            "CatalogProfile": {
                "title": "Profile in the catalog",
                "description": "Information about a profile in the catalog.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the profile.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the profile.",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of the profile.",
                        "type": "string",
                        "enum": [
                            "GLOBAL",
                            "STANDARD"
                        ]
                    },
                    "description": {
                        "description": "Description of the profile.",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "Date of the last update for the profile.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "period": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "companies": {
                        "description": "Customer companies that can have access to the plan.",
                        "type": "array",
                        "items": {
                            "description": "Information about a customer company.",
                            "type": "object",
                            "properties": {
                                "groupCode": {
                                    "description": "Identifier of the customer group.",
                                    "type": "string"
                                },
                                "groupName": {
                                    "description": "Name of the customer group.",
                                    "type": "string"
                                }
                            },
                            "required": [
                                "groupCode",
                                "groupName"
                            ]
                        }
                    },
                    "compatiblePlans": {
                        "description": "Plans that can be ordered with the profile.",
                        "type": "array",
                        "items": {
                            "description": "Information about a plan.",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Identifier of the plan.",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "terms": {
                        "$ref": "#/components/schemas/ProductsOfferingTerms"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "type",
                    "description",
                    "updatedAt",
                    "period",
                    "companies",
                    "compatiblePlans"
                ]
            },
            "CatalogService": {
                "title": "Service in the catalog",
                "description": "Information about a service in the catalog.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the service.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the service.",
                        "type": "string"
                    },
                    "label": {
                        "description": "Commercial label for the service.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the service.",
                        "type": "string"
                    },
                    "portfolio": {
                        "description": "Portfolio of the service.",
                        "type": "string"
                    },
                    "updatedAt": {
                        "description": "Date of the last update for the service.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "period": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "compatiblePlans": {
                        "description": "Plans that can be ordered with this service.",
                        "type": "array",
                        "items": {
                            "description": "Information about a plan.",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Identifier of the plan.",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "compatibleProfiles": {
                        "description": "Profiles that can be ordered with this service.",
                        "type": "array",
                        "items": {
                            "description": "Information about a profile.",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Identifier of the profile.",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "compatibleServices": {
                        "description": "Services that can be ordered with this service.",
                        "type": "array",
                        "items": {
                            "description": "Information about a service.",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Identifier of the service.",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "terms": {
                        "$ref": "#/components/schemas/ProductsOfferingTerms"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "label",
                    "description",
                    "portfolio",
                    "updatedAt",
                    "period",
                    "compatiblePlans",
                    "compatibleProfiles",
                    "compatibleServices"
                ]
            },
            "CatalogDevice": {
                "title": "Device in the catalog",
                "description": "Information about a device in the catalog.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the device.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the device.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the device.",
                        "type": "string"
                    },
                    "portfolio": {
                        "description": "Portfolio of the device.",
                        "type": "string"
                    },
                    "brand": {
                        "description": "Brand of the device.",
                        "type": "string"
                    },
                    "model": {
                        "description": "Model of the device.",
                        "type": "string"
                    },
                    "os": {
                        "description": "Operating System of the device.",
                        "type": "string"
                    },
                    "sar": {
                        "description": "Information about the Specific Absorption Rates (SAR) of the device.",
                        "type": "object",
                        "properties": {
                            "global": {
                                "description": "Specific Absorption Rate (SAR).",
                                "type": "string"
                            },
                            "head": {
                                "description": "Head SAR.",
                                "type": "string"
                            },
                            "trunk": {
                                "description": "Trunk SAR.",
                                "type": "string"
                            },
                            "extremities": {
                                "description": "Extremities SAR.",
                                "type": "string"
                            }
                        }
                    },
                    "weight": {
                        "description": "Weight of the device.",
                        "type": "string"
                    },
                    "size": {
                        "description": "Size of the device.",
                        "type": "string"
                    },
                    "resolution": {
                        "description": "Screen resolution of the device.",
                        "type": "string"
                    },
                    "cardSlots": {
                        "description": "SIM or memory slots on this device.",
                        "type": "array",
                        "items": {
                            "description": "Card formats supported by the slot.",
                            "type": "array",
                            "items": {
                                "description": "Information about a card format.",
                                "type": "string",
                                "enum": [
                                    "SIM",
                                    "MICRO_SIM",
                                    "NANO_SIM",
                                    "MICRO_SD"
                                ]
                            }
                        }
                    },
                    "isESimSupported": {
                        "description": "Value that indicates whether the device supports e-SIM.",
                        "type": "boolean"
                    },
                    "repairabilityIndex": {
                        "description": "Repairability index of the device.",
                        "type": "string"
                    },
                    "buyer": {
                        "description": "Buyer of the device.",
                        "type": "string",
                        "enum": [
                            "COMPANY",
                            "END_USER"
                        ]
                    },
                    "comment": {
                        "description": "Comment of the device.",
                        "type": "string"
                    },
                    "isEndOfLife": {
                        "description": "Value that indicates whether the device has reached its end of life.",
                        "type": "boolean"
                    },
                    "stockLevel": {
                        "description": "Rough indication of the stock of the device.",
                        "type": "string",
                        "enum": [
                            "IN_STOCK",
                            "LIMITED_STOCK",
                            "RISK_OF_STOCK_SHORTAGE",
                            "OUT_OF_STOCK"
                        ]
                    },
                    "pictureUrl": {
                        "description": "URL to a picture of the device.",
                        "type": "string"
                    },
                    "documentationUrl": {
                        "description": "URL to the documentation of the device.",
                        "type": "string"
                    },
                    "compatibleAccessories": {
                        "description": "Accessories that can be used with this device.",
                        "type": "array",
                        "items": {
                            "description": "Information about an accessory.",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Identifier of the accessory.",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "period": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "updatedAt": {
                        "description": "Date of the last update for the device.",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "portfolio",
                    "brand",
                    "model",
                    "os",
                    "sar",
                    "weight",
                    "size",
                    "resolution",
                    "cardSlots",
                    "isESimSupported",
                    "buyer",
                    "comment",
                    "isEndOfLife",
                    "stockLevel",
                    "compatibleAccessories",
                    "period"
                ]
            },
            "CatalogAccessory": {
                "title": "Accessory in the catalog",
                "description": "Information about an accessory in the catalog.",
                "type": "object",
                "properties": {
                    "id": {
                        "description": "Identifier of the accessory.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the accessory.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the accessory.",
                        "type": "string"
                    },
                    "portfolio": {
                        "description": "Portfolio of the accessory.",
                        "type": "string"
                    },
                    "pictureUrl": {
                        "description": "URL to a picture of the accessory.",
                        "type": "string"
                    },
                    "compatibleDevices": {
                        "description": "Devices that can be used with this accessory.",
                        "type": "array",
                        "items": {
                            "description": "Information about a device.",
                            "type": "object",
                            "properties": {
                                "id": {
                                    "description": "Identifier of the device.",
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "period": {
                        "$ref": "#/components/schemas/TimePeriod"
                    },
                    "price": {
                        "$ref": "#/components/schemas/Price"
                    },
                    "updatedAt": {
                        "description": "Date of the last update for the accessory.",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "description",
                    "period",
                    "price"
                ]
            },
            "TimePeriod": {
                "title": "Time period",
                "description": "A period of time between two dates.",
                "type": "object",
                "properties": {
                    "startAt": {
                        "description": "Start date.",
                        "type": "string",
                        "format": "date-time"
                    },
                    "endAt": {
                        "description": "End date.",
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "required": [
                    "startAt",
                    "endAt"
                ]
            },
            "Price": {
                "title": "Price",
                "description": "Information about a price",
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the price",
                        "type": "string"
                    },
                    "type": {
                        "description": "Type of the price",
                        "type": "string",
                        "enum": [
                            "SINGLE_PAYMENT",
                            "MONTHLY_DEBIT"
                        ]
                    },
                    "amount": {
                        "description": "Amount of the price",
                        "type": "number"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "amount"
                ]
            },
            "ME": {
                "title": "Me",
                "type": "object",
                "description": "Information on the connected user and the API Key.",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "Single Identifier of the API key."
                    },
                    "login": {
                        "type": "string",
                        "description": "Login of the associated user."
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the associated user."
                    },
                    "phone": {
                        "type": "string",
                        "description": "Phone number of the associated user."
                    },
                    "mobile": {
                        "type": "string",
                        "description": "Mobile number of the associated user."
                    },
                    "email": {
                        "type": "string",
                        "description": "Email address of the associated user."
                    },
                    "application": {
                        "type": "object",
                        "description": "Application identifier in Orange Developer Portal.",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Orange Single Identifier of the application in the Orange Developer Portal."
                            },
                            "name": {
                                "type": "string",
                                "description": "Name of the application in Orange Developer Portal."
                            }
                        }
                    },
                    "apiKey": {
                        "type": "object",
                        "description": "Token identifier associated to the API Key.",
                        "properties": {
                            "id": {
                                "type": "string",
                                "description": "Orange Single Identifier of the API KEY."
                            },
                            "scopes": {
                                "type": "string",
                                "description": "Scopes defined for the API Key for Machine to Machine connection, or negotiated scopes for User to Machine connection."
                            },
                            "createdAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Date of the creation of the API Key."
                            },
                            "updatedAt": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Last update date of the API Key."
                            },
                            "type": {
                                "type": "string",
                                "description": "Type of the environment (Sandbox or Production).",
                                "enum": [
                                    "ACTIVE",
                                    "EXPIRED",
                                    "SUSPENDED"
                                ]
                            },
                            "expiredAt": {
                                "type": "string",
                                "description": "Date of the expiration of the API Key."
                            }
                        }
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "Date of the creation of the User Account."
                    },
                    "updatedAt": {
                        "type": "string",
                        "description": "Last update date of the User Account."
                    }
                }
            },
            "InternalError": {
                "title": "Internal error",
                "description": "Body of the 'Internal error'.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            1
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Internal error"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "BadGatewayError": {
                "title": "Bad gateway error",
                "description": "Body of the 'Bad gateway' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            3
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Bad gateway"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "ServiceUnavailableError": {
                "title": "Service unavailable error",
                "description": "Body of the 'Service unavailable' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            5
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "The service is temporarily unavailable"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "OverCapacityError": {
                "title": "Over capacity error",
                "description": "Body of the 'Over capacity' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            6
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Orange API is over capacity, retry later !"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "GatewayTimeoutError": {
                "title": "Gateway timeout error",
                "description": "Body of the 'Gateway timeout' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            6
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Gateway timeout"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "InvalidURLParamError": {
                "title": "Invalid URL parameter value error",
                "description": "Body of the 'Invalid URL parameter value' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            20
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Invalid URL parameter value"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "MissingBodyError": {
                "title": "Missing body error",
                "description": "Body of the 'Missing body' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            21
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Missing body"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "InvalidBodyError": {
                "title": "Invalid body error",
                "description": "Body of the 'Invalid body' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            22
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Invalid body"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "MissingBodyFieldError": {
                "title": "Missing body field error",
                "description": "Body of the 'Missing body field' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            23
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Missing body field"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "InvalidBodyFieldError": {
                "title": "Invalid body field error",
                "description": "Body of the 'Invalid body field' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            24
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Invalid body field"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "MissingHeaderError": {
                "title": "Missing header error",
                "description": "Body of the 'Missing header' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            25
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Missing header"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "InvalidHeaderError": {
                "title": "Invalid header value error",
                "description": "Body of the 'Invalid header value' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            26
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Invalid header value"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "MissingQueryStringParamError": {
                "title": "Missing query-string parameter error",
                "description": "Body of the 'Missing query-string parameter' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            27
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Missing query-string parameter"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "InvalidQueryStringParamError": {
                "title": "Invalid query-string parameter value error",
                "description": "Body of the 'Invalid query-string parameter value' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            28
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Invalid query-string parameter value"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "MissingCredentialsError": {
                "title": "Missing credentials error",
                "description": "Body of the 'Missing credentials' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            40
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Missing or invalid credentials"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string",
                        "enum": [
                            "The requested service needs credentials, but the ones provided were invalid or missing."
                        ]
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "InvalidCredentialsError": {
                "title": "Invalid credentials error",
                "description": "Body of the 'Invalid credentials' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            41
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Invalid credentials"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string",
                        "enum": [
                            "The requested service needs credentials, but the ones provided were invalid."
                        ]
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "ExpiredCredentialsError": {
                "title": "Expired credentials error",
                "description": "Body of the 'Expired credentials' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            42
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Expired credentials"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string",
                        "enum": [
                            "The requested service needs credentials, and the ones provided were out-of-date."
                        ]
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "AccessDeniedError": {
                "title": "Access denied error",
                "description": "Body of the 'Access denied' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            50
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Access denied"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string",
                        "enum": [
                            "The application that makes the request is not authorized to access this endpoint (ex: not a subscribed service).\nAPI key not provided"
                        ]
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "ForbiddenRequesterError": {
                "title": "Forbidden requester error",
                "description": "Body of the 'Forbidden requester' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            51
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Forbidden requester"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "ForbiddenUserError": {
                "title": "Forbidden user error",
                "description": "Body of the 'Forbidden user' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            52
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Forbidden user"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "TooManyRequestsError": {
                "title": "Too many requests error",
                "description": "Body of the 'Too many requests' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            53
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Too many requests"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "NotFoundError": {
                "title": "Not found error",
                "description": "Body of the 'Not found' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            60
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Resource not found"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "NotAcceptableError": {
                "title": "Not acceptable error",
                "description": "Body of the 'Not acceptable' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            62
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Not acceptable"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "RequestTimeoutError": {
                "title": "Request time-out error",
                "description": "Body of the 'Request time-out' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            63
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Request time-out"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "LengthRequiredError": {
                "title": "Length required error",
                "description": "Body of the 'Length required' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            64
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Length required"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "PreconditionFailedError": {
                "title": "Precondition failed error",
                "description": "Body of the 'Precondition failed' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            65
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Precondition failed"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "RequestEntityTooLargeError": {
                "title": "Request entity too large error",
                "description": "Body of the 'Request entity too large' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            66
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Request entity too large"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "RequestURITooLongError": {
                "title": "Request-URI too long error",
                "description": "Body of the 'Request-URI too long' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            67
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Request-URI too long"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "UnsupportedMediaTypeError": {
                "title": "Unsupported media type error",
                "description": "Body of the 'Unsupported media type' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer",
                        "enum": [
                            68
                        ]
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string",
                        "enum": [
                            "Unsupported Media Type"
                        ]
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "message",
                    "description"
                ]
            },
            "UnprocessableEntityError": {
                "title": "Unprocessable entity error",
                "description": "Body of the 'Unprocessable entity' error.",
                "type": "object",
                "properties": {
                    "code": {
                        "description": "Error code.",
                        "type": "integer"
                    },
                    "subCode": {
                        "description": "Error sub-code.",
                        "type": "integer"
                    },
                    "message": {
                        "description": "Error message.",
                        "type": "string"
                    },
                    "description": {
                        "description": "Error description.",
                        "type": "string"
                    }
                },
                "required": [
                    "code",
                    "subCode",
                    "message",
                    "description"
                ]
            }
        },
        "responses": {
            "BadRequest": {
                "description": "400 Bad request.",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "400 Bad request body.",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/InvalidURLParamError"
                                },
                                {
                                    "$ref": "#/components/schemas/MissingBodyError"
                                },
                                {
                                    "$ref": "#/components/schemas/InvalidBodyError"
                                },
                                {
                                    "$ref": "#/components/schemas/MissingBodyFieldError"
                                },
                                {
                                    "$ref": "#/components/schemas/InvalidBodyFieldError"
                                },
                                {
                                    "$ref": "#/components/schemas/MissingHeaderError"
                                },
                                {
                                    "$ref": "#/components/schemas/InvalidHeaderError"
                                },
                                {
                                    "$ref": "#/components/schemas/MissingQueryStringParamError"
                                },
                                {
                                    "$ref": "#/components/schemas/InvalidQueryStringParamError"
                                }
                            ]
                        }
                    }
                }
            },
            "Unauthorized": {
                "description": "401 Unauthorized.",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "401 Unauthorized body.",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/MissingCredentialsError"
                                },
                                {
                                    "$ref": "#/components/schemas/InvalidCredentialsError"
                                },
                                {
                                    "$ref": "#/components/schemas/ExpiredCredentialsError"
                                }
                            ]
                        }
                    }
                }
            },
            "Denied": {
                "description": "403 Denied.",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "403 Denied body.",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/AccessDeniedError"
                                },
                                {
                                    "$ref": "#/components/schemas/ForbiddenRequesterError"
                                },
                                {
                                    "$ref": "#/components/schemas/ForbiddenUserError"
                                },
                                {
                                    "$ref": "#/components/schemas/TooManyRequestsError"
                                }
                            ]
                        }
                    }
                }
            },
            "NotFound": {
                "description": "404 Not found.",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/NotFoundError"
                        }
                    }
                }
            },
            "NotAcceptable": {
                "description": "406 Not acceptable",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/NotAcceptableError"
                        }
                    }
                }
            },
            "RequestTimeout": {
                "description": "408 Request time-out",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RequestTimeoutError"
                        }
                    }
                }
            },
            "LengthRequired": {
                "description": "411 Length required",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/LengthRequiredError"
                        }
                    }
                }
            },
            "PreconditionFailed": {
                "description": "412 Precondition failed",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/PreconditionFailedError"
                        }
                    }
                }
            },
            "RequestEntityTooLarge": {
                "description": "413 Request entity too large",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RequestEntityTooLargeError"
                        }
                    }
                }
            },
            "RequestURITooLong": {
                "description": "414 Request-URI too long",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RequestURITooLongError"
                        }
                    }
                }
            },
            "UnsupportedMediaType": {
                "description": "415 Unsupported media type",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/UnsupportedMediaTypeError"
                        }
                    }
                }
            },
            "UnprocessableEntity": {
                "description": "422 Unprocessable entity",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/UnprocessableEntityError"
                        }
                    }
                }
            },
            "TooManyRequests": {
                "description": "429 Too many requests",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/TooManyRequestsError"
                        }
                    }
                }
            },
            "InternalServerError": {
                "description": "500 Internal Server Error",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/InternalError"
                        }
                    }
                }
            },
            "BadGateway": {
                "description": "502 Bad Gateway.",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "502 Bad Gateway body.",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/InternalError"
                                },
                                {
                                    "$ref": "#/components/schemas/BadGatewayError"
                                }
                            ]
                        }
                    }
                }
            },
            "ServiceUnavailable": {
                "description": "503 Service Unavailable",
                "content": {
                    "application/json": {
                        "schema": {
                            "description": "503 Service Unavailable body.",
                            "oneOf": [
                                {
                                    "$ref": "#/components/schemas/ServiceUnavailableError"
                                },
                                {
                                    "$ref": "#/components/schemas/OverCapacityError"
                                }
                            ]
                        }
                    }
                }
            },
            "GatewayTimeout": {
                "description": "504 Gateway Timeout",
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/GatewayTimeoutError"
                        }
                    }
                }
            }
        },
        "securitySchemes": {
            "API Key": {
                "name": "X-API-KEY",
                "type": "apiKey",
                "in": "query"
            },
            "OAuth 2.0 Access Token": {
                "type": "http",
                "scheme": "bearer",
                "bearerFormat": "JWT"
            }
        }
    },
    "tags": [
        {
            "name": "Subscriptions",
            "description": "Find subscriptions matching search criteria and retrieve detail of a specific subscription."
        },
        {
            "name": "SIM Cards",
            "description": "Find SIM cards matching search criteria and retrieve detail of a specific SIM card."
        },
        {
            "name": "Subscribers",
            "description": "Find subscribers matching search criteria and retrieve detail of a specific subscriber."
        },
        {
            "name": "Devices",
            "description": "Find devices matching search criteria and retrieve detail of a specific mobile."
        },
        {
            "name": "BillingAccounts",
            "description": "Find billing accounts matching search criteria and retrieve detail of a billing account."
        },
        {
            "name": "Requests",
            "description": "Find requests matching search criteria and retrieve detail of a specific request."
        },
        {
            "name": "Catalog",
            "description": "Find plans, profiles or services matching search criteria."
        },
        {
            "name": "Miscellaneous",
            "description": "Get detail about the API (documentation, version, status)."
        }
    ]
}
